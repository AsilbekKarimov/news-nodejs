{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Victus\\\\Desktop\\\\Node JS\\\\news-mern\\\\client\\\\src\\\\components\\\\Auth\\\\Auth.js\";\nimport React, { useState } from 'react';\nimport { Avatar, Button, Paper, Grid, Typography, Container, TextField } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport useStyles from './styles';\nimport Input from './Input';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { FcGoogle } from 'react-icons/fc';\nimport { AUTH } from '../../constants/actionTypes';\nimport { auth, provider, signInWithPopup } from '../Firebase/firebase';\nimport axios from 'axios';\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  phone_number: ''\n};\nconst Auth = () => {\n  const classes = useStyles();\n  const [isTelegramAuth, setIsTelegramAuth] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const [formData, setFormData] = useState(initialState);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (isTelegramAuth) {\n      try {\n        const response = await axios.post('/user/verify-telegram-code', {\n          code: verificationCode\n        });\n        if (response.data.success) {\n          dispatch({\n            type: AUTH,\n            data: {\n              result: response.data.user,\n              token: response.data.token\n            }\n          });\n          navigate('/');\n        } else {\n          alert('Invalid verification code.');\n        }\n      } catch (error) {\n        console.error('Error verifying Telegram code:', error);\n      }\n    } else {\n      // Other authentication logic (e.g., Google)\n    }\n  };\n  const handleChange = e => setFormData({\n    ...formData,\n    [e.target.name]: e.target.value\n  });\n  const startTelegramAuth = async () => {\n    try {\n      // Start the Telegram authentication process on the server\n      await axios.post('/user/start-telegram-auth', {\n        phone_number: formData.phone_number\n      });\n      // Redirect the user to the Telegram bot\n      window.open('https://t.me/regnodejs_bot', '_blank');\n      // Show the input field for the verification code after the bot interaction\n      setIsTelegramAuth(true);\n    } catch (error) {\n      console.error('Error starting Telegram auth:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LockOutlinedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      color: 'white'\n    },\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, isTelegramAuth ? 'Enter Telegram Code' : 'Sign in'), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, !isTelegramAuth && /*#__PURE__*/React.createElement(Input, {\n    name: \"phone_number\",\n    label: \"Phone Number\",\n    handleChange: handleChange,\n    type: \"text\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }\n  }), isTelegramAuth && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"verificationCode\",\n    label: \"Verification Code\",\n    fullWidth: true,\n    value: verificationCode,\n    onChange: e => setVerificationCode(e.target.value),\n    variant: \"outlined\",\n    InputProps: {\n      style: {\n        color: '#d5d5d5'\n      }\n    },\n    InputLabelProps: {\n      style: {\n        color: '#d5d5d5'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, isTelegramAuth ? 'Verify Code' : 'Sign in with Telegram'), !isTelegramAuth && /*#__PURE__*/React.createElement(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.telegramButton,\n    onClick: startTelegramAuth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, \"Sign in with Telegram\"))));\n};\nexport default Auth;","map":{"version":3,"names":["React","useState","Avatar","Button","Paper","Grid","Typography","Container","TextField","LockOutlinedIcon","useStyles","Input","useDispatch","useNavigate","FcGoogle","AUTH","auth","provider","signInWithPopup","axios","initialState","firstName","lastName","email","password","confirmPassword","phone_number","Auth","classes","isTelegramAuth","setIsTelegramAuth","verificationCode","setVerificationCode","formData","setFormData","dispatch","navigate","handleSubmit","e","preventDefault","response","post","code","data","success","type","result","user","token","alert","error","console","handleChange","target","name","value","startTelegramAuth","window","open","createElement","component","maxWidth","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","paper","elevation","avatar","style","color","variant","form","onSubmit","container","spacing","label","autoFocus","item","xs","fullWidth","onChange","InputProps","InputLabelProps","submit","telegramButton","onClick"],"sources":["C:/Users/Victus/Desktop/Node JS/news-mern/client/src/components/Auth/Auth.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Avatar, Button, Paper, Grid, Typography, Container, TextField } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport useStyles from './styles';\r\nimport Input from './Input';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FcGoogle } from 'react-icons/fc';\r\nimport { AUTH } from '../../constants/actionTypes';\r\nimport { auth, provider, signInWithPopup } from '../Firebase/firebase';\r\nimport axios from 'axios'; \r\n\r\nconst initialState = { firstName: '', lastName: '', email: '', password: '', confirmPassword: '', phone_number: '' };\r\n\r\nconst Auth = () => {\r\n    const classes = useStyles();\r\n    const [isTelegramAuth, setIsTelegramAuth] = useState(false);\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n    const [formData, setFormData] = useState(initialState);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (isTelegramAuth) {\r\n            try {\r\n                const response = await axios.post('/user/verify-telegram-code', { code: verificationCode });\r\n                if (response.data.success) {\r\n                    dispatch({ type: AUTH, data: { result: response.data.user, token: response.data.token } });\r\n                    navigate('/');\r\n                } else {\r\n                    alert('Invalid verification code.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error verifying Telegram code:', error);\r\n            }\r\n        } else {\r\n            // Other authentication logic (e.g., Google)\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const startTelegramAuth = async () => {\r\n        try {\r\n            // Start the Telegram authentication process on the server\r\n            await axios.post('/user/start-telegram-auth', { phone_number: formData.phone_number });\r\n            // Redirect the user to the Telegram bot\r\n            window.open('https://t.me/regnodejs_bot', '_blank');\r\n            // Show the input field for the verification code after the bot interaction\r\n            setIsTelegramAuth(true);\r\n        } catch (error) {\r\n            console.error('Error starting Telegram auth:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Paper className={classes.paper} elevation={3}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography style={{ color: 'white' }} component=\"h1\" variant=\"h5\">\r\n                    {isTelegramAuth ? 'Enter Telegram Code' : 'Sign in'}\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        {!isTelegramAuth && (\r\n                            <Input \r\n                                name=\"phone_number\" \r\n                                label=\"Phone Number\" \r\n                                handleChange={handleChange} \r\n                                type=\"text\" \r\n                                autoFocus \r\n                            />\r\n                        )}\r\n                        {isTelegramAuth && (\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    name=\"verificationCode\"\r\n                                    label=\"Verification Code\"\r\n                                    fullWidth\r\n                                    value={verificationCode}\r\n                                    onChange={(e) => setVerificationCode(e.target.value)}\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{ style: { color: '#d5d5d5' } }}\r\n                                    InputLabelProps={{ style: { color: '#d5d5d5' } }}\r\n                                />\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                        {isTelegramAuth ? 'Verify Code' : 'Sign in with Telegram'}\r\n                    </Button>\r\n                    {!isTelegramAuth && (\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.telegramButton}\r\n                            onClick={startTelegramAuth}\r\n                        >\r\n                            Sign in with Telegram\r\n                        </Button>\r\n                    )}\r\n                </form>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}