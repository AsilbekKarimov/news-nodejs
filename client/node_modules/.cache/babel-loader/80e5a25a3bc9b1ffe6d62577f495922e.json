{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Victus\\\\Desktop\\\\Node JS\\\\news-mern\\\\client\\\\src\\\\components\\\\Auth\\\\Auth.js\";\nimport React, { useState } from 'react';\nimport { Avatar, Button, Paper, Grid, Typography, Container, TextField } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport useStyles from './styles';\nimport Input from './Input';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { FcGoogle } from 'react-icons/fc';\nimport { AUTH } from '../../constants/actionTypes';\nimport { auth, provider, signInWithPopup } from '../firebase'; // Import from your Firebase config\n\nconst initialState = {\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\nconst Auth = () => {\n  const classes = useStyles();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSignup, setIsSignup] = useState(false);\n  const [formData, setFormData] = useState(initialState);\n  const [isTelegramAuth, setIsTelegramAuth] = useState(false);\n  const [verificationCode, setVerificationCode] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const handleShowPassword = () => setShowPassword(prevShowPassword => !prevShowPassword);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (isTelegramAuth) {\n      try {\n        const response = await axios.post('/user/verify-telegram-code', {\n          code: verificationCode\n        });\n        if (response.data.success) {\n          dispatch({\n            type: AUTH,\n            data: {\n              result: response.data.user,\n              token: response.data.token\n            }\n          });\n          navigate('/');\n        } else {\n          alert('Invalid verification code.');\n        }\n      } catch (error) {\n        console.error('Error verifying Telegram code:', error);\n      }\n    } else {\n      // Existing Google sign-in or other sign-in logic\n    }\n  };\n  const handleChange = e => setFormData({\n    ...formData,\n    [e.target.name]: e.target.value\n  });\n  const switchMode = () => {\n    setIsSignup(prevIsSignup => !prevIsSignup);\n    setShowPassword(false);\n  };\n  const googleSignIn = () => {\n    signInWithPopup(auth, provider).then(async result => {\n      const user = result.user;\n      const token = await user.getIdToken();\n      const profile = {\n        name: user.displayName,\n        email: user.email,\n        picture: user.photoURL\n      };\n      try {\n        dispatch({\n          type: AUTH,\n          data: {\n            result: profile,\n            token\n          }\n        });\n        navigate('/');\n      } catch (error) {\n        console.log(error);\n      }\n    }).catch(error => {\n      console.log('Google Sign In was unsuccessful. Try again later');\n      console.log(error);\n    });\n  };\n  const startTelegramAuth = async () => {\n    try {\n      const response = await axios.post('/user/start-telegram-auth', {\n        phone_number: formData.phone_number\n      });\n      console.log('Telegram Auth Started:', response.data);\n      // Redirect to Telegram bot\n      window.open('https://t.me/regnodejs_bot', '_blank');\n      setIsTelegramAuth(true); // Indicate that the Telegram auth process has started\n    } catch (error) {\n      console.error('Error starting Telegram auth:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LockOutlinedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      color: 'white'\n    },\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, isSignup ? 'Sign up' : isTelegramAuth ? 'Enter Telegram Code' : 'Sign in'), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, isSignup && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n    name: \"firstName\",\n    label: \"First Name\",\n    handleChange: handleChange,\n    autoFocus: true,\n    half: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"lastName\",\n    label: \"Last Name\",\n    handleChange: handleChange,\n    half: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  })), isTelegramAuth ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    name: \"verificationCode\",\n    label: \"Verification Code\",\n    fullWidth: true,\n    value: verificationCode,\n    onChange: e => setVerificationCode(e.target.value),\n    variant: \"outlined\",\n    InputProps: {\n      style: {\n        color: '#d5d5d5'\n      }\n    },\n    InputLabelProps: {\n      style: {\n        color: '#d5d5d5'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n    name: \"email\",\n    label: \"Email Address\",\n    handleChange: handleChange,\n    type: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    label: \"Password\",\n    handleChange: handleChange,\n    type: showPassword ? 'text' : 'password',\n    handleShowPassword: handleShowPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }), isSignup && /*#__PURE__*/React.createElement(Input, {\n    name: \"confirmPassword\",\n    label: \"Repeat Password\",\n    handleChange: handleChange,\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 46\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, isSignup ? 'Sign Up' : isTelegramAuth ? 'Verify Code' : 'Sign In'), !isTelegramAuth && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    fullWidth: true,\n    variant: \"outlined\",\n    color: \"default\",\n    className: classes.googleButton,\n    onClick: googleSignIn,\n    startIcon: /*#__PURE__*/React.createElement(FcGoogle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 44\n      }\n    }),\n    style: {\n      backgroundColor: 'white',\n      color: '#3c4043',\n      textTransform: 'none',\n      borderColor: '#dadce0',\n      borderRadius: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, \"Sign in with Google\"), /*#__PURE__*/React.createElement(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.telegramButton,\n    onClick: startTelegramAuth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, \"Sign in with Telegram\")), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      color: '#d5d5d5'\n    },\n    onClick: switchMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 29\n    }\n  }, isSignup ? 'Already have an account? Sign in' : \"Don't have an account? Sign Up\"))))));\n};\nexport default Auth;","map":{"version":3,"names":["React","useState","Avatar","Button","Paper","Grid","Typography","Container","TextField","LockOutlinedIcon","useStyles","Input","useDispatch","useNavigate","FcGoogle","AUTH","auth","provider","signInWithPopup","initialState","firstName","lastName","email","password","confirmPassword","Auth","classes","showPassword","setShowPassword","isSignup","setIsSignup","formData","setFormData","isTelegramAuth","setIsTelegramAuth","verificationCode","setVerificationCode","dispatch","navigate","handleShowPassword","prevShowPassword","handleSubmit","e","preventDefault","response","axios","post","code","data","success","type","result","user","token","alert","error","console","handleChange","target","name","value","switchMode","prevIsSignup","googleSignIn","then","getIdToken","profile","displayName","picture","photoURL","log","catch","startTelegramAuth","phone_number","window","open","createElement","component","maxWidth","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","paper","elevation","avatar","style","color","variant","form","onSubmit","container","spacing","Fragment","label","autoFocus","half","item","xs","fullWidth","onChange","InputProps","InputLabelProps","submit","googleButton","onClick","startIcon","backgroundColor","textTransform","borderColor","borderRadius","telegramButton","justify"],"sources":["C:/Users/Victus/Desktop/Node JS/news-mern/client/src/components/Auth/Auth.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Avatar, Button, Paper, Grid, Typography, Container, TextField } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport useStyles from './styles';\r\nimport Input from './Input';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FcGoogle } from 'react-icons/fc';\r\nimport { AUTH } from '../../constants/actionTypes';\r\nimport { auth, provider, signInWithPopup } from '../firebase'; // Import from your Firebase config\r\n\r\nconst initialState = { firstName: '', lastName: '', email: '', password: '', confirmPassword: '' };\r\n\r\nconst Auth = () => {\r\n    const classes = useStyles();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [isSignup, setIsSignup] = useState(false);\r\n    const [formData, setFormData] = useState(initialState);\r\n    const [isTelegramAuth, setIsTelegramAuth] = useState(false);\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const handleShowPassword = () => setShowPassword((prevShowPassword) => !prevShowPassword);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (isTelegramAuth) {\r\n            try {\r\n                const response = await axios.post('/user/verify-telegram-code', { code: verificationCode });\r\n                if (response.data.success) {\r\n                    dispatch({ type: AUTH, data: { result: response.data.user, token: response.data.token } });\r\n                    navigate('/');\r\n                } else {\r\n                    alert('Invalid verification code.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error verifying Telegram code:', error);\r\n            }\r\n        } else {\r\n            // Existing Google sign-in or other sign-in logic\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const switchMode = () => {\r\n        setIsSignup((prevIsSignup) => !prevIsSignup);\r\n        setShowPassword(false);\r\n    };\r\n\r\n    const googleSignIn = () => {\r\n        signInWithPopup(auth, provider)\r\n            .then(async (result) => {\r\n                const user = result.user;\r\n                const token = await user.getIdToken();\r\n                const profile = {\r\n                    name: user.displayName,\r\n                    email: user.email,\r\n                    picture: user.photoURL,\r\n                };\r\n\r\n                try {\r\n                    dispatch({ type: AUTH, data: { result: profile, token } });\r\n                    navigate('/');\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('Google Sign In was unsuccessful. Try again later');\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    const startTelegramAuth = async () => {\r\n        try {\r\n            const response = await axios.post('/user/start-telegram-auth', { phone_number: formData.phone_number });\r\n            console.log('Telegram Auth Started:', response.data);\r\n            // Redirect to Telegram bot\r\n            window.open('https://t.me/regnodejs_bot', '_blank');\r\n            setIsTelegramAuth(true); // Indicate that the Telegram auth process has started\r\n        } catch (error) {\r\n            console.error('Error starting Telegram auth:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Paper className={classes.paper} elevation={3}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography style={{ color: 'white' }} component=\"h1\" variant=\"h5\">\r\n                    {isSignup ? 'Sign up' : isTelegramAuth ? 'Enter Telegram Code' : 'Sign in'}\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={handleSubmit}>\r\n                    <Grid container spacing={2}>\r\n                        {isSignup && (\r\n                            <>\r\n                                <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus half />\r\n                                <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} half />\r\n                            </>\r\n                        )}\r\n                        {isTelegramAuth ? (\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    name=\"verificationCode\"\r\n                                    label=\"Verification Code\"\r\n                                    fullWidth\r\n                                    value={verificationCode}\r\n                                    onChange={(e) => setVerificationCode(e.target.value)}\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{ style: { color: '#d5d5d5' } }}\r\n                                    InputLabelProps={{ style: { color: '#d5d5d5' } }}\r\n                                />\r\n                            </Grid>\r\n                        ) : (\r\n                            <>\r\n                                <Input name=\"email\" label=\"Email Address\" handleChange={handleChange} type=\"email\" />\r\n                                <Input name=\"password\" label=\"Password\" handleChange={handleChange} type={showPassword ? 'text' : 'password'} handleShowPassword={handleShowPassword} />\r\n                                {isSignup && <Input name=\"confirmPassword\" label=\"Repeat Password\" handleChange={handleChange} type=\"password\" />}\r\n                            </>\r\n                        )}\r\n                    </Grid>\r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                        {isSignup ? 'Sign Up' : isTelegramAuth ? 'Verify Code' : 'Sign In'}\r\n                    </Button>\r\n                    {!isTelegramAuth && (\r\n                        <>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                color=\"default\"\r\n                                className={classes.googleButton}\r\n                                onClick={googleSignIn}\r\n                                startIcon={<FcGoogle />}\r\n                                style={{\r\n                                    backgroundColor: 'white',\r\n                                    color: '#3c4043',\r\n                                    textTransform: 'none',\r\n                                    borderColor: '#dadce0',\r\n                                    borderRadius: '5px',\r\n                                }}\r\n                            >\r\n                                Sign in with Google\r\n                            </Button>\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.telegramButton}\r\n                                onClick={startTelegramAuth}\r\n                            >\r\n                                Sign in with Telegram\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item>\r\n                            <Button style={{ color: '#d5d5d5' }} onClick={switchMode}>\r\n                                {isSignup ? 'Already have an account? Sign in' : \"Don't have an account? Sign Up\"}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}